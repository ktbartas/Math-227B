clear all; close all; clc;
% 1/30/21 MATH227B HW#3 w/professor Qing Nie
%part c

%unknown one is x
%unknown two is y
syms x y      % declare the system
eq1=log(x)-y;   %put in first equation
eq2=-exp(x)-y+9   ;  %put in second equation
guesx=30 ;      %take a guess for x
guesy=33 ;     %take a guess for y
num_it=10;     %set how many iterations you want 

solution=zeros(2,num_it)
for k=1:num_it
solution(:,k)=newt_method(eq1,eq2,guesx,guesy,k)
end
double(solution)
%problem: my method only finds one solution
%if there are two solutions, it will only return 
%the solution that is closer to the initial guess

%test - check my answer with matlab solve function answers
test1=eq1==0;
test2=eq2==0;
testsol=vpasolve([test1,test2],[x y]);
actx=testsol.x(end,1)
acty=testsol.y(end,1)

%calculate square of error and compare
xnewts=solution(1,:);
ynewts=solution(2,:);
xerrs=abs(xnewts-actx);
xerrsquare=xerrs.^9;
xerrtoplot=xerrs(2:end)./xerrsquare(1:end-1);
yerrs=abs(ynewts-acty);
yerrsquare=yerrs.^9;
yerrtoplot=yerrs(2:end)./yerrsquare(1:end-1);
xaxis=2:num_it;

xkn1=log(xerrs(1:end-1));
xknplus1=log(xerrs(2:end));
px=xknplus1./xkn1
ykn1=log(yerrs(1:end-1));
yknplus1=log(yerrs(2:end));
py=yknplus1./ykn1
%plot
figure(1)
plot(xaxis,xerrtoplot)
%xlim([2 10])
%ylim([0 0.001])
title('Problem part c, Example 2, x-values')
xlabel('Iteration (guess #)') 
ylabel('c') 
figure(2)
plot(xaxis,yerrtoplot)
%xlim([2 10])
%ylim([0 0.8])
title('Problem part c, Example 2, y-values')
xlabel('Iteration (guess #)') 
ylabel('c') 
figure(3)
plot(xaxis,px)
hold on
%xlim([2 10])
%ylim([0 0.8])
plot(xaxis,py,'LineStyle','--')
title('Problem part c, Example 2, x-values and y-values')
xlabel('Iteration (guess #)') 
ylabel('P') 
legend('P-value for x','P-value for y')
hold off

%function takes 5 inputs:
%1) e1=equation 1
%2) e2=equation 2
%3) guessx= initial guess for x_0
%4) guessy= intial guess for y_0
%5) number of iterations (more should be better)
function x_n = newt_method(e1,e2,guessx,guessy,iter)
    syms x y  % declare the system
    guess=[guessx;guessy] ;%put guess into matrix
    jmat=jacobian([e1,e2],[x,y]) ;%calculate the jacobian
    invjmat = inv(jmat) ;%take inverse of the jacobian
    invmat1=subs(invjmat,[x,y],[guessx,guessy]);
    f1=subs(e1,[x,y],[guessx,guessy]);
    f2=subs(e2,[x,y],[guessx,guessy]);
    finit=[f1;f2];
    result=guess-invmat1*finit;
    for i=1:iter
        j=1;
        while j<i
            in1=result(1,1); %convert to double because it so slow
            in2=result(2,1);
            injmatii=subs(invjmat,[x,y],[in1,in2]);
            temp1=subs(e1,[x,y],[in1,in2]);
            temp2=subs(e2,[x,y],[in1,in2]);
            temp3=[temp1;temp2];
            result=result-injmatii*temp3;
            j=j+1;
        end
    end
    x_n=result;
end